buildPack: ml-python-training
pipelineConfig:
  agent:
    container: machine-learning
    label: jenkins-machine-learning
  pipelines:
    post: {}
    pullRequest:
      pipeline:
        options:
          containerOptions:
            env:
            - name: BUILDPACK_NAME
              value: ml-python-training
            - name: DOCKER_CONFIG
              value: /home/jenkins/.docker/
            - name: DOCKER_REGISTRY
              valueFrom:
                configMapKeyRef:
                  key: docker.registry
                  name: jenkins-x-docker-registry
            - name: GIT_AUTHOR_EMAIL
              value: jenkins-x@googlegroups.com
            - name: GIT_AUTHOR_NAME
              value: jenkins-x-bot
            - name: GIT_COMMITTER_EMAIL
              value: jenkins-x@googlegroups.com
            - name: GIT_COMMITTER_NAME
              value: jenkins-x-bot
            - name: JENKINS_URL
              value: http://jenkins:8080
            - name: XDG_CONFIG_HOME
              value: /home/jenkins
            name: ""
            resources:
              limits:
                cpu: "8"
                memory: 16Gi
              requests:
                cpu: "2"
                memory: 4Gi
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /home/jenkins
              name: workspace-volume
            - mountPath: /var/run/docker.sock
              name: docker-daemon
            - mountPath: /home/jenkins/.docker
              name: volume-0
          volumes:
          - emptyDir: {}
            name: workspace-volume
          - hostPath:
              path: /var/run/docker.sock
            name: docker-daemon
          - name: volume-0
            secret:
              secretName: jenkins-docker-cfg
        stages:
        - agent:
            image: machine-learning
          dir: /workspace/source
          name: from-build-pack
          steps:
          - command: source /root/.bashrc && flake8
            dir: /workspace/source
            image: machine-learning
            name: build-flake8
          - command: source /root/.bashrc && pytest
            dir: /workspace/source
            image: machine-learning
            name: build-testing
          - command: source /root/.bashrc && python3 -m pip install -r ./requirements.txt
              && python3 app.py
            dir: /workspace/source
            image: machine-learning
            name: build-training
          - command: /usr/local/bin/exec-sonar-scanner.sh
            args:
            - -s http://jx-sonarqube.sonarqube.svc.cluster.local:9000
            - -k 12345
            - -r true
            - -p true
            image: gcr.io/jx-mar19/jx-app-sonar-scanner:0.0.0-unset
            name: sonar-scanner
    release:
      pipeline:
        options:
          containerOptions:
            env:
            - name: BUILDPACK_NAME
              value: ml-python-training
            - name: DOCKER_CONFIG
              value: /home/jenkins/.docker/
            - name: DOCKER_REGISTRY
              valueFrom:
                configMapKeyRef:
                  key: docker.registry
                  name: jenkins-x-docker-registry
            - name: GIT_AUTHOR_EMAIL
              value: jenkins-x@googlegroups.com
            - name: GIT_AUTHOR_NAME
              value: jenkins-x-bot
            - name: GIT_COMMITTER_EMAIL
              value: jenkins-x@googlegroups.com
            - name: GIT_COMMITTER_NAME
              value: jenkins-x-bot
            - name: JENKINS_URL
              value: http://jenkins:8080
            - name: XDG_CONFIG_HOME
              value: /home/jenkins
            name: ""
            resources:
              limits:
                cpu: "8"
                memory: 16Gi
              requests:
                cpu: "2"
                memory: 4Gi
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /home/jenkins
              name: workspace-volume
            - mountPath: /var/run/docker.sock
              name: docker-daemon
            - mountPath: /home/jenkins/.docker
              name: volume-0
          volumes:
          - emptyDir: {}
            name: workspace-volume
          - hostPath:
              path: /var/run/docker.sock
            name: docker-daemon
          - name: volume-0
            secret:
              secretName: jenkins-docker-cfg
        stages:
        - agent:
            image: machine-learning
          dir: /workspace/source
          name: from-build-pack
          steps:
          - command: jx step git credentials
            dir: /workspace/source
            image: machine-learning
            name: setup-jx-git-credentials
          - command: source /root/.bashrc && flake8
            dir: /workspace/source
            image: machine-learning
            name: build-flake8
          - command: source /root/.bashrc && python3 -m pip install -r ./requirements.txt
              && python3 app.py
            dir: /workspace/source
            image: machine-learning
            name: build-training
          - command: /usr/local/bin/exec-sonar-scanner.sh
            args:
            - -s http://jx-sonarqube.sonarqube.svc.cluster.local:9000
            - -k 12345
            - -r true
            - -p true
            image: gcr.io/jx-mar19/jx-app-sonar-scanner:0.0.0-unset
            name: sonar-scanner
          - command: |
              source /root/.bashrc && export TARGET_SERVICE=`echo $APP_NAME | sed -Ee s/-training$/-service/` && export GIT_PROVIDER=`jx repo -qub | grep -oP '(^https?:\/\/[a-zA-Z\d-\.]+)'` && export TARGET_SERVICE_REPO=`echo $GIT_PROVIDER/$REPO_OWNER/$TARGET_SERVICE` && git clone $TARGET_SERVICE_REPO && cd $TARGET_SERVICE && git checkout syncmodel || git checkout -b syncmodel && git lfs install && git lfs track '*.onnx' && cp ../*.onnx . && git add *.onnx && { jx create pullrequest --push -b --title 'New model trained' --body 'feat: New model trained' || echo 'Using previous PR'; } && sha1sum *.onnx >&2
            dir: /workspace/source
            image: machine-learning
            name: build-export-model
      setVersion:
        steps:
        - image: machine-learning
          steps:
          - comment: so we can retrieve the version in later steps
            sh: echo \$(jx-release-version) > VERSION
          - sh: jx step tag --version \$(cat VERSION)

